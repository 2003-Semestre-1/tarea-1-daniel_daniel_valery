/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.tarea01ddv;

import java.awt.Desktop;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

public class GUI extends javax.swing.JFrame {

    
    String fileName;
    int step = 0;
    int i = 0;
    
    ArrayList<int[]> instrucciones = null;
    ArrayList<String[]> instruccionesRaw = null;
    ArrayList<String> instruccionesBin = null;
    
    
     
    ExecuteProgram executeLoop = new ExecuteProgram();
    
    /**
     * Creates new form gui
     */
    public GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        fileNameLabel = new javax.swing.JLabel();
        cargarASMbutton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        asmBinarioTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        memTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        registros = new javax.swing.JTable();
        nextBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        instruccionCounter = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        fileNameLabel.setText("*.asm");

        cargarASMbutton.setText("Cargar ASM");
        cargarASMbutton.setToolTipText("");
        cargarASMbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarASMbuttonActionPerformed(evt);
            }
        });

        asmBinarioTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ASM", "Binario"
            }
        ));
        jScrollPane1.setViewportView(asmBinarioTable);

        memTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Memoria"
            }
        ));
        jScrollPane2.setViewportView(memTable);

        registros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Registro", "Valor"
            }
        ));
        jScrollPane3.setViewportView(registros);

        nextBtn.setText("Ejecutar siguiente instrucción");
        nextBtn.setEnabled(false);
        nextBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Instrucción:");

        instruccionCounter.setText("0");

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(instruccionCounter, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(fileNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(46, 46, 46)
                        .addComponent(cargarASMbutton)
                        .addGap(18, 18, 18)
                        .addComponent(nextBtn)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 471, Short.MAX_VALUE)
                        .addGap(15, 15, 15))))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cargarASMbutton)
                    .addComponent(nextBtn))
                .addGap(19, 19, 19)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(instruccionCounter))
                .addGap(18, 18, 18)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 501, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 14, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 16, Short.MAX_VALUE))
        );

        mainPanel.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cargarASMbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarASMbuttonActionPerformed

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        fileChooser.setFileFilter(new FileNameExtensionFilter("", "asm"));
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            fileNameLabel.setText(selectedFile.getAbsolutePath());
            fileName = selectedFile.getAbsolutePath();
            nextBtn.setEnabled(false);
            limpiarElementos();
            initValues();
            
        }
        
        
    }//GEN-LAST:event_cargarASMbuttonActionPerformed

    private void nextBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextBtnActionPerformed

        ejecutarInstruccion();
    }//GEN-LAST:event_nextBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
               
            }
        });
         
    }
    
    public void llenarMemoria(ExecuteProgram executeLoop){
        DefaultTableModel model = (DefaultTableModel) memTable.getModel();
        int[][] memoria = executeLoop.getMemoria(); 
        for(int i=0;i < memoria.length;i++){
            if(memoria[i] == null) {                
                Object[] row1 = {"*espacio libre*"};
                model.addRow(row1);
            }
            else{
                Object[] row1 = {String.valueOf(memoria[i][0])+String.valueOf(memoria[i][1])+String.valueOf(memoria[i][2])};
                model.addRow(row1);
            }
        }
    }
    
    public void llenarAsmBinario(ArrayList<String[]> instruccionesRaw,ArrayList<String> instruccionesBin){
        DefaultTableModel model = (DefaultTableModel) asmBinarioTable.getModel();
        for(int i=0;i < instruccionesRaw.get(0).length;i++){
            Object[] row1 = {instruccionesRaw.get(0)[i], instruccionesBin.get(i)};
            model.addRow(row1);
        }
    
    }
    
    public void initValues(){
        
        DefaultTableModel model = (DefaultTableModel) registros.getModel();
        String inputFileName = fileName;
                
        ProgramParser parser = new ProgramParser();
        try {
            instrucciones = parser.parse(inputFileName);
            instruccionesRaw = parser.asmInstrucs;
            instruccionesBin = parser.instrucsBinary;
            
        } catch (Exception e) {
            System.out.println(e.getMessage());         
            JOptionPane.showMessageDialog(mainPanel, "Formato de archivo incorrecto", "ERROR",JOptionPane.ERROR_MESSAGE);
            return;
        }
        if(instrucciones!=(null) && !instrucciones.isEmpty()){   
            executeLoop.cargarPrograma(instrucciones);
            llenarAsmBinario(instruccionesRaw,instruccionesBin);
            llenarMemoria(executeLoop);         
            JOptionPane.showMessageDialog(mainPanel, "Archivo "+ fileName +" cargado al sistema", "Info",JOptionPane.INFORMATION_MESSAGE);
            nextBtn.setEnabled(true);
        }
        else{
            JOptionPane.showMessageDialog(mainPanel, "Archivo vacío", "ERROR",JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public void ejecutarInstruccion(){
        
        DefaultTableModel model = (DefaultTableModel) registros.getModel();
        if(i<instrucciones.size()){
            if (step%2 == 0){
                executeLoop.fetch();
                System.out.println("Fetch instruccion #"+i);
                instruccionCounter.setText(String.valueOf(i));
                Object[] row0 = {"Fetch instruccion #"+String.valueOf(i)};
                model.addRow(row0);
                Object[] row1 = {"AX",executeLoop.getAX()};
                model.addRow(row1);
                Object[] row2 = {"BX",executeLoop.getBX()};
                model.addRow(row2);
                Object[] row3 = {"CX",executeLoop.getCX()};
                model.addRow(row3);
                Object[] row4 = {"DX",executeLoop.getDX()};
                model.addRow(row4);
                Object[] row5 = {"AC",executeLoop.getAC()};
                model.addRow(row5);   
                System.out.println(executeLoop.toString());
                System.out.println("\n-----------------------------------------\n");
            }else{
                executeLoop.execute();
                Object[] row0 = {"Execute instruccion #"+String.valueOf(i)};
                model.addRow(row0);
                Object[] row1 = {"AX",executeLoop.getAX()};
                model.addRow(row1);
                Object[] row2 = {"BX",executeLoop.getBX()};
                model.addRow(row2);
                Object[] row3 = {"CX",executeLoop.getCX()};
                model.addRow(row3);
                Object[] row4 = {"DX",executeLoop.getDX()};
                model.addRow(row4);
                Object[] row5 = {"AC",executeLoop.getAC()};
                model.addRow(row5);
                System.out.println("Execute instruccion #"+i);
                System.out.println(executeLoop.toString());
                System.out.println("\n-----------------------------------------\n");
                i++;
            }
            step++;
        }
    }
    
    public void limpiarElementos(){
        step = 0;
        i = 0;
        instruccionCounter.setText("0");
        executeLoop.clear();
        DefaultTableModel model = (DefaultTableModel) registros.getModel();
        model.setRowCount(0);
        DefaultTableModel modelAsm = (DefaultTableModel) asmBinarioTable.getModel();
        modelAsm.setRowCount(0);
        DefaultTableModel modelMem = (DefaultTableModel) memTable.getModel();
        modelMem.setRowCount(0);
    }
  
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTable asmBinarioTable;
    public javax.swing.JButton cargarASMbutton;
    public javax.swing.JLabel fileNameLabel;
    private javax.swing.JLabel instruccionCounter;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    public javax.swing.JPanel mainPanel;
    public javax.swing.JTable memTable;
    public javax.swing.JButton nextBtn;
    public javax.swing.JTable registros;
    // End of variables declaration//GEN-END:variables
}
